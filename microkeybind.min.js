"use strict"; var _createClass = function () { function a(b, c) { for (var f, d = 0; d < c.length; d++)f = c[d], f.enumerable = f.enumerable || !1, f.configurable = !0, "value" in f && (f.writable = !0), Object.defineProperty(b, f.key, f) } return function (b, c, d) { return c && a(b.prototype, c), d && a(b, d), b } }(); function _classCallCheck(a, b) { if (!(a instanceof b)) throw new TypeError("Cannot call a class as a function") } var Keybinding = function () { function a() { _classCallCheck(this, a), this.keyCodes = { 9: "tab", 13: "enter", 16: "shift", 17: "ctrl", 18: "alt", 19: "pause/break", 20: "caps lock", 27: "escape", 33: "page up", 34: "page down", 35: "end", 36: "home", 37: "left arrow", 38: "up arrow", 39: "right arrow", 40: "down arrow", 45: "insert", 46: "delete", 48: "0", 49: "1", 50: "2", 51: "3", 52: "4", 53: "5", 54: "6", 55: "7", 56: "8", 57: "9", 65: "a", 66: "b", 67: "c", 68: "d", 69: "e", 70: "f", 71: "g", 72: "h", 73: "i", 74: "j", 75: "k", 76: "l", 77: "m", 78: "n", 79: "o", 80: "p", 81: "q", 82: "r", 83: "s", 84: "t", 85: "u", 86: "v", 87: "w", 88: "x", 89: "y", 90: "z", 91: "left window key", 92: "right window key", 93: "select key", 96: "numpad 0", 97: "numpad 1", 98: "numpad 2", 99: "numpad 3", 100: "numpad 4", 101: "numpad 5", 102: "numpad 6", 103: "numpad 7", 104: "numpad 8", 105: "numpad 9", 106: "multiply", 107: "add", 109: "subtract", 110: "decimal point", 111: "divide", 112: "f1", 113: "f2", 114: "f3", 115: "f4", 116: "f5", 117: "f6", 118: "f7", 119: "f8", 120: "f9", 121: "f10", 122: "f11", 123: "f12", 144: "num lock", 145: "scroll lock", 186: "semi-colon", 187: "equal sign", 188: "comma", 189: "dash", 190: "period", 191: "forward slash", 192: "grave accent", 219: "open bracket", 220: "back slash", 221: "close braket", 222: "single quote" }, this.bindedKeys = {} } return _createClass(a, [{ key: "keydown", value: function keydown(b) { "function" == typeof this.bindedKeys[b.keyCode] && this.bindedKeys[b.keyCode].call(this, b) } }, { key: "keybind", value: function (b) { var f = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : document, g = arguments[2]; "function" == typeof f && (g = f, f = document); var c = this.getCode(b); this.bindedKeys[c] = g; var d = this.keydown.bind(this); f.onkeydown = d } }, { key: "getCode", value: function getCode(b) { return this.findKey(this.keyCodes, b) } }, { key: "findKey", value: function findKey(b, c) { var d = null; for (var f in b) b.hasOwnProperty(f) && b[f] === c && (d = f); return d } }]), a }(), keybindClass = new Keybinding, keybind = keybindClass.keybind.bind(keybindClass);